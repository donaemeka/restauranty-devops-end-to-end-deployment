# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s    # How often to scrape metrics
    
    scrape_configs:
      - job_name: 'restauranty-services'
        static_configs:
        - targets: ['auth-service:3001', 'items-service:3003', 'discounts-service:3002']  # Services to monitor

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090    # Prometheus web UI port
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/
      volumes:
      - name: config
        configMap:
          name: prometheus-config    # Mount config file

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: NodePort    # Expose externally for access

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000    # Grafana web UI port
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"         # Default password - change in production!

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: NodePort    # Expose externally for dashboard access
  spec:
  template:
    spec:
      securityContext:
        runAsNonRoot: true    # Prevent container from running as root user
        runAsUser: 1000       # Run as user ID 1000 (non-privileged user)
      containers:
      - name: [service-name]
        securityContext:
          allowPrivilegeEscalation: false  # Prevent privilege escalation attacks
          capabilities:
            drop:
            - ALL             # Remove all Linux capabilities for security
            